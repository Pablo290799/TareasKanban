import { Inject, Injectable, Optional } from '@angular/core';
import { Md5 } from 'ts-md5/dist/md5';
import { GRAVATAR_CONFIG_TOKEN } from './gravatar-config.token';
import { DEFAULT_CONFIG } from './ngx-gravatar.constants';
import * as i0 from "@angular/core";
export class NgxGravatarService {
    constructor(gravatarConfig) {
        this.gravatarConfig = gravatarConfig;
        this.defaultConfig = { ...DEFAULT_CONFIG };
        if (this.gravatarConfig) {
            this.defaultConfig = { ...this.defaultConfig, ...this.gravatarConfig };
        }
    }
    /**
     * Return defaultConfig object
     */
    getDefaultConfig() {
        return this.defaultConfig;
    }
    /**
     * Generate gravatar url
     *
     * @param email is a string. If email is not a string, email will be set to empty string "" by default
     * @param md5Hash is a string. If value is given it will take precedence over email.
     * @param size number
     * @param rating string
     * @param fallback string
     * @return gravatar url
     */
    generateGravatarUrl(email, md5Hash, size = this.defaultConfig.size, rating = this.defaultConfig.rating, fallback = this.defaultConfig.fallback) {
        let emailHash;
        if (md5Hash) {
            emailHash = md5Hash;
        }
        else {
            try {
                email = email.trim().toLowerCase();
            }
            catch (e) {
                console.error(`[ngx-gravatar] - Email (${email}) is not a string. Empty string is used as a default email.`);
                email = '';
            }
            emailHash = Md5.hashStr(email);
        }
        return `https://www.gravatar.com/avatar/${emailHash}?s=${size}&r=${rating}&d=${fallback}`;
    }
}
NgxGravatarService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: NgxGravatarService, deps: [{ token: GRAVATAR_CONFIG_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
NgxGravatarService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: NgxGravatarService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: NgxGravatarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [GRAVATAR_CONFIG_TOKEN]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdyYXZhdGFyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ3JhdmF0YXIvc3JjL2xpYi9uZ3gtZ3JhdmF0YXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBa0IsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV0QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7O0FBSzFELE1BQU0sT0FBTyxrQkFBa0I7SUFHN0IsWUFHVSxjQUE4QjtRQUE5QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFFdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUcsY0FBYyxFQUFFLENBQUM7UUFFM0MsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDeEU7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxnQkFBZ0I7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRztJQUNILG1CQUFtQixDQUNqQixLQUFhLEVBQ2IsT0FBZ0IsRUFDaEIsT0FBZSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFDdEMsU0FBaUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQzFDLFdBQW1CLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUTtRQUU5QyxJQUFJLFNBQThCLENBQUM7UUFDbkMsSUFBSSxPQUFPLEVBQUU7WUFDWCxTQUFTLEdBQUcsT0FBTyxDQUFDO1NBQ3JCO2FBQU07WUFDTCxJQUFJO2dCQUNGLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDcEM7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixPQUFPLENBQUMsS0FBSyxDQUNYLDJCQUEyQixLQUFLLDZEQUE2RCxDQUM5RixDQUFDO2dCQUNGLEtBQUssR0FBRyxFQUFFLENBQUM7YUFDWjtZQUNELFNBQVMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxtQ0FBbUMsU0FBUyxNQUFNLElBQUksTUFBTSxNQUFNLE1BQU0sUUFBUSxFQUFFLENBQUM7SUFDNUYsQ0FBQzs7K0dBdERVLGtCQUFrQixrQkFLbkIscUJBQXFCO21IQUxwQixrQkFBa0IsY0FGakIsTUFBTTsyRkFFUCxrQkFBa0I7a0JBSDlCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkFLSSxRQUFROzswQkFDUixNQUFNOzJCQUFDLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNZDUgfSBmcm9tICd0cy1tZDUvZGlzdC9tZDUnO1xuaW1wb3J0IHsgR3JhdmF0YXJDb25maWcgfSBmcm9tICcuL2dyYXZhdGFyLWNvbmZpZyc7XG5pbXBvcnQgeyBHUkFWQVRBUl9DT05GSUdfVE9LRU4gfSBmcm9tICcuL2dyYXZhdGFyLWNvbmZpZy50b2tlbic7XG5pbXBvcnQgeyBERUZBVUxUX0NPTkZJRyB9IGZyb20gJy4vbmd4LWdyYXZhdGFyLmNvbnN0YW50cyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hHcmF2YXRhclNlcnZpY2Uge1xuICBwcml2YXRlIGRlZmF1bHRDb25maWc6IEdyYXZhdGFyQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChHUkFWQVRBUl9DT05GSUdfVE9LRU4pXG4gICAgcHJpdmF0ZSBncmF2YXRhckNvbmZpZzogR3JhdmF0YXJDb25maWdcbiAgKSB7XG4gICAgdGhpcy5kZWZhdWx0Q29uZmlnID0geyAuLi5ERUZBVUxUX0NPTkZJRyB9O1xuXG4gICAgaWYgKHRoaXMuZ3JhdmF0YXJDb25maWcpIHtcbiAgICAgIHRoaXMuZGVmYXVsdENvbmZpZyA9IHsgLi4udGhpcy5kZWZhdWx0Q29uZmlnLCAuLi50aGlzLmdyYXZhdGFyQ29uZmlnIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBkZWZhdWx0Q29uZmlnIG9iamVjdFxuICAgKi9cbiAgZ2V0RGVmYXVsdENvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0Q29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdyYXZhdGFyIHVybFxuICAgKlxuICAgKiBAcGFyYW0gZW1haWwgaXMgYSBzdHJpbmcuIElmIGVtYWlsIGlzIG5vdCBhIHN0cmluZywgZW1haWwgd2lsbCBiZSBzZXQgdG8gZW1wdHkgc3RyaW5nIFwiXCIgYnkgZGVmYXVsdFxuICAgKiBAcGFyYW0gbWQ1SGFzaCBpcyBhIHN0cmluZy4gSWYgdmFsdWUgaXMgZ2l2ZW4gaXQgd2lsbCB0YWtlIHByZWNlZGVuY2Ugb3ZlciBlbWFpbC5cbiAgICogQHBhcmFtIHNpemUgbnVtYmVyXG4gICAqIEBwYXJhbSByYXRpbmcgc3RyaW5nXG4gICAqIEBwYXJhbSBmYWxsYmFjayBzdHJpbmdcbiAgICogQHJldHVybiBncmF2YXRhciB1cmxcbiAgICovXG4gIGdlbmVyYXRlR3JhdmF0YXJVcmwoXG4gICAgZW1haWw6IHN0cmluZyxcbiAgICBtZDVIYXNoPzogc3RyaW5nLFxuICAgIHNpemU6IG51bWJlciA9IHRoaXMuZGVmYXVsdENvbmZpZy5zaXplLFxuICAgIHJhdGluZzogc3RyaW5nID0gdGhpcy5kZWZhdWx0Q29uZmlnLnJhdGluZyxcbiAgICBmYWxsYmFjazogc3RyaW5nID0gdGhpcy5kZWZhdWx0Q29uZmlnLmZhbGxiYWNrXG4gICkge1xuICAgIGxldCBlbWFpbEhhc2g6IHN0cmluZyB8IEludDMyQXJyYXk7XG4gICAgaWYgKG1kNUhhc2gpIHtcbiAgICAgIGVtYWlsSGFzaCA9IG1kNUhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGVtYWlsID0gZW1haWwudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYFtuZ3gtZ3JhdmF0YXJdIC0gRW1haWwgKCR7ZW1haWx9KSBpcyBub3QgYSBzdHJpbmcuIEVtcHR5IHN0cmluZyBpcyB1c2VkIGFzIGEgZGVmYXVsdCBlbWFpbC5gXG4gICAgICAgICk7XG4gICAgICAgIGVtYWlsID0gJyc7XG4gICAgICB9XG4gICAgICBlbWFpbEhhc2ggPSBNZDUuaGFzaFN0cihlbWFpbCk7XG4gICAgfVxuICAgIHJldHVybiBgaHR0cHM6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci8ke2VtYWlsSGFzaH0/cz0ke3NpemV9JnI9JHtyYXRpbmd9JmQ9JHtmYWxsYmFja31gO1xuICB9XG59XG4iXX0=