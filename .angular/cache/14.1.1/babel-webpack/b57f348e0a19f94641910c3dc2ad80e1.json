{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/HP/Desktop/LCIK/TP IS2_renovado/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createClient } from '@supabase/supabase-js';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nexport const BOARDS_TABLE = 'boards';\nexport const USER_BOARDS_TABLE = 'user_boards';\nexport const LISTS_TABLE = 'lists';\nexport const CARDS_TABLE = 'cards';\nexport const USERS_TABLE = 'users';\nexport class DataService {\n  constructor() {\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey);\n  }\n\n  startBoard() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.supabase.from(BOARDS_TABLE).insert({}, {\n        returning: 'minimal'\n      });\n    })();\n  }\n\n  getBoards() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const boards = yield _this2.supabase.from(USER_BOARDS_TABLE).select('boards:board_id(*)');\n      return boards.data || [];\n    })();\n  } // CRUD Board\n\n\n  getBoardInfo(boardId) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this3.supabase.from(BOARDS_TABLE).select('*').match({\n        id: boardId\n      }).single();\n    })();\n  }\n\n  updateBoard(board) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this4.supabase.from(BOARDS_TABLE).update(board).match({\n        id: board.id\n      });\n    })();\n  }\n\n  deleteBoard(board) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this5.supabase.from(BOARDS_TABLE).delete().match({\n        id: board.id\n      });\n    })();\n  } // CRUD Lists\n\n\n  getBoardLists(boardId) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const lists = yield _this6.supabase.from(LISTS_TABLE).select('*').eq('board_id', boardId).order('position');\n      return lists.data || [];\n    })();\n  }\n\n  addBoardList(boardId, position = 0) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this7.supabase.from(LISTS_TABLE).insert({\n        board_id: boardId,\n        position,\n        title: 'New List'\n      }).select('*').single();\n    })();\n  }\n\n  updateBoardList(list) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this8.supabase.from(LISTS_TABLE).update(list).match({\n        id: list.id\n      });\n    })();\n  }\n\n  deleteBoardList(list) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this9.supabase.from(LISTS_TABLE).delete().match({\n        id: list.id\n      });\n    })();\n  } // CRUD Cards\n\n\n  addListCard(listId, boardId, position = 0) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this10.supabase.from(CARDS_TABLE).insert({\n        board_id: boardId,\n        list_id: listId,\n        position\n      }).select('*').single();\n    })();\n  }\n\n  getListCards(listId) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      const lists = yield _this11.supabase.from(CARDS_TABLE).select('*').eq('list_id', listId).order('position');\n      return lists.data || [];\n    })();\n  }\n\n  updateCard(card) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this12.supabase.from(CARDS_TABLE).update(card).match({\n        id: card.id\n      });\n    })();\n  }\n\n  deleteCard(card) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this13.supabase.from(CARDS_TABLE).delete().match({\n        id: card.id\n      });\n    })();\n  } // Invite others\n\n\n  addUserToBoard(boardId, email) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      const user = yield _this14.supabase.from(USERS_TABLE).select('id').match({\n        email\n      }).single();\n\n      if (user.data?.id) {\n        const userId = user.data.id;\n        const userBoard = yield _this14.supabase.from(USER_BOARDS_TABLE).insert({\n          user_id: userId,\n          board_id: boardId\n        }, {\n          returning: 'minimal'\n        });\n        return userBoard;\n      } else {\n        return null;\n      }\n    })();\n  }\n\n  getTableChanges() {\n    const changes = new Subject();\n    this.supabase.from(CARDS_TABLE).on('*', payload => {\n      changes.next(payload);\n    }).subscribe();\n    this.supabase.from(LISTS_TABLE).on('*', payload => {\n      changes.next(payload);\n    }).subscribe();\n    return changes.asObservable();\n  }\n\n}\n\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)();\n};\n\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["createClient","Subject","environment","BOARDS_TABLE","USER_BOARDS_TABLE","LISTS_TABLE","CARDS_TABLE","USERS_TABLE","DataService","constructor","supabase","supabaseUrl","supabaseKey","startBoard","from","insert","returning","getBoards","boards","select","data","getBoardInfo","boardId","match","id","single","updateBoard","board","update","deleteBoard","delete","getBoardLists","lists","eq","order","addBoardList","position","board_id","title","updateBoardList","list","deleteBoardList","addListCard","listId","list_id","getListCards","updateCard","card","deleteCard","addUserToBoard","email","user","userId","userBoard","user_id","getTableChanges","changes","on","payload","next","subscribe","asObservable","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\LCIK\\TP IS2_renovado\\src\\app\\services\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { SupabaseClient, createClient } from '@supabase/supabase-js';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\nexport const BOARDS_TABLE = 'boards';\nexport const USER_BOARDS_TABLE = 'user_boards';\nexport const LISTS_TABLE = 'lists';\nexport const CARDS_TABLE = 'cards';\nexport const USERS_TABLE = 'users';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n  private supabase: SupabaseClient;\n\n  constructor() {\n    this.supabase = createClient(\n      environment.supabaseUrl,\n      environment.supabaseKey\n    );\n  }\n\n  async startBoard() {\n    return this.supabase\n      .from(BOARDS_TABLE)\n      .insert({}, { returning: 'minimal' });\n  }\n\n  async getBoards() {\n    const boards = await this.supabase\n      .from(USER_BOARDS_TABLE)\n      .select('boards:board_id(*)');\n    return boards.data || [];\n  }\n\n  // CRUD Board\n  async getBoardInfo(boardId: string) {\n    return await this.supabase\n      .from(BOARDS_TABLE)\n      .select('*')\n      .match({ id: boardId })\n      .single();\n  }\n\n  async updateBoard(board: any) {\n    return await this.supabase\n      .from(BOARDS_TABLE)\n      .update(board)\n      .match({ id: board.id });\n  }\n\n  async deleteBoard(board: any) {\n    return await this.supabase\n      .from(BOARDS_TABLE)\n      .delete()\n      .match({ id: board.id });\n  }\n\n  // CRUD Lists\n  async getBoardLists(boardId: string) {\n    const lists = await this.supabase\n      .from(LISTS_TABLE)\n      .select('*')\n      .eq('board_id', boardId)\n      .order('position');\n\n    return lists.data || [];\n  }\n\n  async addBoardList(boardId: string, position = 0) {\n    return await this.supabase\n      .from(LISTS_TABLE)\n      .insert({ board_id: boardId, position, title: 'New List' })\n      .select('*')\n      .single();\n  }\n\n  async updateBoardList(list: any) {\n    return await this.supabase\n      .from(LISTS_TABLE)\n      .update(list)\n      .match({ id: list.id });\n  }\n\n  async deleteBoardList(list: any) {\n    return await this.supabase\n      .from(LISTS_TABLE)\n      .delete()\n      .match({ id: list.id });\n  }\n\n  // CRUD Cards\n  async addListCard(listId: string, boardId: string, position = 0) {\n    return await this.supabase\n      .from(CARDS_TABLE)\n      .insert({ board_id: boardId, list_id: listId, position })\n      .select('*')\n      .single();\n  }\n\n  async getListCards(listId: string) {\n    const lists = await this.supabase\n      .from(CARDS_TABLE)\n      .select('*')\n      .eq('list_id', listId)\n      .order('position');\n\n    return lists.data || [];\n  }\n\n  async updateCard(card: any) {\n    return await this.supabase\n      .from(CARDS_TABLE)\n      .update(card)\n      .match({ id: card.id });\n  }\n\n  async deleteCard(card: any) {\n    return await this.supabase\n      .from(CARDS_TABLE)\n      .delete()\n      .match({ id: card.id });\n  }\n\n  // Invite others\n  async addUserToBoard(boardId: string, email: string) {\n    const user = await this.supabase\n      .from(USERS_TABLE)\n      .select('id')\n      .match({ email })\n      .single();\n\n    if (user.data?.id) {\n      const userId = user.data.id;\n      const userBoard = await this.supabase.from(USER_BOARDS_TABLE).insert(\n        {\n          user_id: userId,\n          board_id: boardId,\n        },\n        { returning: 'minimal' }\n      );\n      return userBoard;\n    } else {\n      return null;\n    }\n  }\n\n  getTableChanges() {\n    const changes = new Subject();\n\n    this.supabase\n      .from(CARDS_TABLE)\n      .on('*', (payload) => {\n        changes.next(payload);\n      })\n      .subscribe();\n\n    this.supabase\n      .from(LISTS_TABLE)\n      .on('*', (payload) => {\n        changes.next(payload);\n      })\n      .subscribe();\n\n    return changes.asObservable();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}