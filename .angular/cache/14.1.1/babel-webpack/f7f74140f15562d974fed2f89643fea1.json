{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, Directive, Input, NgModule } from '@angular/core';\nimport { Md5 } from 'ts-md5/dist/md5';\n/**\n * Injection token for gravatar configuration\n */\n\nconst GRAVATAR_CONFIG_TOKEN = new InjectionToken('gravatarCustom.config'); // Visit https://en.gravatar.com/site/implement/images for more information\n\nvar FALLBACK;\n\n(function (FALLBACK) {\n  FALLBACK[\"blank\"] = \"blank\";\n  FALLBACK[\"identicon\"] = \"identicon\";\n  FALLBACK[\"mm\"] = \"mm\";\n  FALLBACK[\"mp\"] = \"mp\";\n  FALLBACK[\"monsterid\"] = \"monsterid\";\n  FALLBACK[\"retro\"] = \"retro\";\n  FALLBACK[\"robohash\"] = \"robohash\";\n  FALLBACK[\"wavatar\"] = \"wavatar\";\n})(FALLBACK || (FALLBACK = {}));\n\nvar RATING;\n\n(function (RATING) {\n  RATING[\"g\"] = \"g\";\n  RATING[\"pg\"] = \"pg\";\n  RATING[\"r\"] = \"r\";\n  RATING[\"x\"] = \"x\";\n})(RATING || (RATING = {}));\n\nconst DEFAULT_CONFIG = {\n  fallback: FALLBACK.retro,\n  size: 40,\n  cornerRadius: 0,\n  preferGravatar: false,\n  hasBorder: false,\n  borderColor: '#000000',\n  borderRadius: '50%',\n  borderStyle: 'solid',\n  borderWidth: 1,\n  round: true,\n  backgroundColor: 'transparent',\n  rating: RATING.g,\n  ratio: 2\n};\n\nclass NgxGravatarService {\n  constructor(gravatarConfig) {\n    this.gravatarConfig = gravatarConfig;\n    this.defaultConfig = { ...DEFAULT_CONFIG\n    };\n\n    if (this.gravatarConfig) {\n      this.defaultConfig = { ...this.defaultConfig,\n        ...this.gravatarConfig\n      };\n    }\n  }\n  /**\n   * Return defaultConfig object\n   */\n\n\n  getDefaultConfig() {\n    return this.defaultConfig;\n  }\n  /**\n   * Generate gravatar url\n   *\n   * @param email is a string. If email is not a string, email will be set to empty string \"\" by default\n   * @param md5Hash is a string. If value is given it will take precedence over email.\n   * @param size number\n   * @param rating string\n   * @param fallback string\n   * @return gravatar url\n   */\n\n\n  generateGravatarUrl(email, md5Hash, size = this.defaultConfig.size, rating = this.defaultConfig.rating, fallback = this.defaultConfig.fallback) {\n    let emailHash;\n\n    if (md5Hash) {\n      emailHash = md5Hash;\n    } else {\n      try {\n        email = email.trim().toLowerCase();\n      } catch (e) {\n        console.error(`[ngx-gravatar] - Email (${email}) is not a string. Empty string is used as a default email.`);\n        email = '';\n      }\n\n      emailHash = Md5.hashStr(email);\n    }\n\n    return `https://www.gravatar.com/avatar/${emailHash}?s=${size}&r=${rating}&d=${fallback}`;\n  }\n\n}\n\nNgxGravatarService.ɵfac = function NgxGravatarService_Factory(t) {\n  return new (t || NgxGravatarService)(i0.ɵɵinject(GRAVATAR_CONFIG_TOKEN, 8));\n};\n\nNgxGravatarService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxGravatarService,\n  factory: NgxGravatarService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxGravatarService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [GRAVATAR_CONFIG_TOKEN]\n      }]\n    }];\n  }, null);\n})();\n/* eslint-disable @angular-eslint/directive-selector */\n\n\nclass NgxGravatarDirective {\n  constructor(elementRef, renderer, gravatarService) {\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.gravatarService = gravatarService;\n    this.style = {};\n    this.initialized = false;\n    this.defaultConfig = this.gravatarService.getDefaultConfig(); // Listen for error when fetching custom src\n\n    this.renderer.listen(this.elementRef.nativeElement, 'error', event => {\n      if (!this.isGravatarUsed) {\n        this.initializeAvatar(true); // Force using gravatar\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.initializeAvatar();\n    this.initialized = true;\n    this.isGravatarUsed = false;\n  }\n\n  ngOnChanges() {\n    if (this.initialized) {\n      this.initializeAvatar();\n    }\n  }\n  /**\n   * Set default values for user inputs if they are not provided\n   */\n\n\n  setDefaultValues() {\n    this.size = this.computeSize();\n    this.ratio = this.ratio === undefined ? this.defaultConfig.ratio : this.ratio;\n    this.requestedSize = this.size * this.ratio;\n    this.round = this.round === undefined ? this.defaultConfig.round : this.round;\n    this.cornerRadius = this.cornerRadius === undefined ? this.defaultConfig.cornerRadius : this.cornerRadius;\n    this.preferGravatar = this.preferGravatar === undefined ? this.defaultConfig.preferGravatar : this.preferGravatar;\n  }\n  /**\n   * Initialize avatar.\n   * Custom source has higher priority if preferGravatar is not set on.\n   * Finally, set styles for the avatar.\n   */\n\n\n  initializeAvatar(forcedGravatar) {\n    this.setDefaultValues();\n    let url = '';\n\n    if (this.preferGravatar || forcedGravatar) {\n      url = this.gravatarService.generateGravatarUrl(this.email, this.md5Hash, this.requestedSize, this.rating, this.fallback);\n      this.isGravatarUsed = true;\n    } else {\n      // this.preferGravatar == false\n      if (this.src) {\n        url = this.src;\n      } else {\n        // fallback to gravatar\n        url = this.gravatarService.generateGravatarUrl(this.email, this.md5Hash, this.requestedSize, this.rating, this.fallback);\n        this.isGravatarUsed = true;\n      }\n    }\n\n    this.renderer.setProperty(this.elementRef.nativeElement, 'src', url);\n    this.setStyle(this.avatarStyle());\n  }\n  /**\n   * Compute the size of the avatar\n   *\n   * @return size\n   */\n\n\n  computeSize() {\n    let size = this.size === undefined ? this.defaultConfig.size : this.size;\n\n    if (this.style && this.style.width) {\n      try {\n        const width = this.style.width.trim();\n\n        if (width.match(/^\\d+px$/)) {\n          // width with px unit\n          size = width.replace('px', '');\n        }\n      } catch (e) {\n        return size;\n      }\n    }\n\n    return size;\n  }\n  /**\n   * Compute style object\n   *\n   * @return style object\n   */\n\n\n  avatarStyle() {\n    const style = {\n      width: this.size + 'px',\n      height: this.size + 'px',\n      borderRadius: this.round ? this.defaultConfig.borderRadius : this.cornerRadius + 'px',\n      borderStyle: this.defaultConfig.hasBorder || this.borderColor || this.borderWidth ? this.defaultConfig.borderStyle : 'none',\n      borderColor: this.borderColor ? this.borderColor : this.defaultConfig.borderColor,\n      borderWidth: this.borderWidth ? this.borderWidth + 'px' : this.defaultConfig.borderWidth + 'px',\n      backgroundColor: this.backgroundColor ? this.backgroundColor : this.defaultConfig.backgroundColor\n    };\n    return { ...style,\n      ...this.style\n    };\n  }\n  /**\n   * Set style for the avatar\n   *\n   * @param styles style object\n   */\n\n\n  setStyle(styles) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(this.elementRef.nativeElement, key, styles[key]);\n    });\n  }\n\n}\n\nNgxGravatarDirective.ɵfac = function NgxGravatarDirective_Factory(t) {\n  return new (t || NgxGravatarDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(NgxGravatarService));\n};\n\nNgxGravatarDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxGravatarDirective,\n  selectors: [[\"\", \"ngx-gravatar\", \"\"], [\"\", \"ngxGravatar\", \"\"]],\n  inputs: {\n    src: \"src\",\n    email: \"email\",\n    md5Hash: \"md5Hash\",\n    size: \"size\",\n    fallback: \"fallback\",\n    rating: \"rating\",\n    round: \"round\",\n    cornerRadius: \"cornerRadius\",\n    borderColor: \"borderColor\",\n    borderWidth: \"borderWidth\",\n    style: \"style\",\n    preferGravatar: \"preferGravatar\",\n    backgroundColor: \"backgroundColor\",\n    ratio: \"ratio\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxGravatarDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-gravatar], [ngxGravatar]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: NgxGravatarService\n    }];\n  }, {\n    src: [{\n      type: Input\n    }],\n    email: [{\n      type: Input\n    }],\n    md5Hash: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    fallback: [{\n      type: Input\n    }],\n    rating: [{\n      type: Input\n    }],\n    round: [{\n      type: Input\n    }],\n    cornerRadius: [{\n      type: Input\n    }],\n    borderColor: [{\n      type: Input\n    }],\n    borderWidth: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    preferGravatar: [{\n      type: Input\n    }],\n    backgroundColor: [{\n      type: Input\n    }],\n    ratio: [{\n      type: Input\n    }]\n  });\n})();\n\nclass GravatarModule {\n  static forRoot(gravatarConfig) {\n    return {\n      ngModule: GravatarModule,\n      providers: [{\n        provide: GRAVATAR_CONFIG_TOKEN,\n        useValue: gravatarConfig\n      }]\n    };\n  }\n\n}\n\nGravatarModule.ɵfac = function GravatarModule_Factory(t) {\n  return new (t || GravatarModule)();\n};\n\nGravatarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GravatarModule\n});\nGravatarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GravatarModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxGravatarDirective],\n      exports: [NgxGravatarDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-gravatar\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FALLBACK, GravatarModule, NgxGravatarDirective, NgxGravatarService, RATING };","map":{"version":3,"names":["i0","InjectionToken","Injectable","Optional","Inject","Directive","Input","NgModule","Md5","GRAVATAR_CONFIG_TOKEN","FALLBACK","RATING","DEFAULT_CONFIG","fallback","retro","size","cornerRadius","preferGravatar","hasBorder","borderColor","borderRadius","borderStyle","borderWidth","round","backgroundColor","rating","g","ratio","NgxGravatarService","constructor","gravatarConfig","defaultConfig","getDefaultConfig","generateGravatarUrl","email","md5Hash","emailHash","trim","toLowerCase","e","console","error","hashStr","ɵfac","ɵprov","type","args","providedIn","undefined","decorators","NgxGravatarDirective","elementRef","renderer","gravatarService","style","initialized","listen","nativeElement","event","isGravatarUsed","initializeAvatar","ngOnInit","ngOnChanges","setDefaultValues","computeSize","requestedSize","forcedGravatar","url","src","setProperty","setStyle","avatarStyle","width","match","replace","height","styles","Object","keys","forEach","key","ElementRef","Renderer2","ɵdir","selector","GravatarModule","forRoot","ngModule","providers","provide","useValue","ɵmod","ɵinj","declarations","exports"],"sources":["C:/Users/rodri/Dropbox/1. H.O. Estibajes S.R.L/Locker/Rodrigo/PC/Lcik - FP-UNA/2024/1° Periodo 2024/Ingeniería de Software 2/Proyecto_IS2/TareasKanban/node_modules/ngx-gravatar/fesm2020/ngx-gravatar.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, Directive, Input, NgModule } from '@angular/core';\nimport { Md5 } from 'ts-md5/dist/md5';\n\n/**\n * Injection token for gravatar configuration\n */\nconst GRAVATAR_CONFIG_TOKEN = new InjectionToken('gravatarCustom.config');\n\n// Visit https://en.gravatar.com/site/implement/images for more information\nvar FALLBACK;\n(function (FALLBACK) {\n    FALLBACK[\"blank\"] = \"blank\";\n    FALLBACK[\"identicon\"] = \"identicon\";\n    FALLBACK[\"mm\"] = \"mm\";\n    FALLBACK[\"mp\"] = \"mp\";\n    FALLBACK[\"monsterid\"] = \"monsterid\";\n    FALLBACK[\"retro\"] = \"retro\";\n    FALLBACK[\"robohash\"] = \"robohash\";\n    FALLBACK[\"wavatar\"] = \"wavatar\";\n})(FALLBACK || (FALLBACK = {}));\nvar RATING;\n(function (RATING) {\n    RATING[\"g\"] = \"g\";\n    RATING[\"pg\"] = \"pg\";\n    RATING[\"r\"] = \"r\";\n    RATING[\"x\"] = \"x\";\n})(RATING || (RATING = {}));\n\nconst DEFAULT_CONFIG = {\n    fallback: FALLBACK.retro,\n    size: 40,\n    cornerRadius: 0,\n    preferGravatar: false,\n    hasBorder: false,\n    borderColor: '#000000',\n    borderRadius: '50%',\n    borderStyle: 'solid',\n    borderWidth: 1,\n    round: true,\n    backgroundColor: 'transparent',\n    rating: RATING.g,\n    ratio: 2,\n};\n\nclass NgxGravatarService {\n    constructor(gravatarConfig) {\n        this.gravatarConfig = gravatarConfig;\n        this.defaultConfig = { ...DEFAULT_CONFIG };\n        if (this.gravatarConfig) {\n            this.defaultConfig = { ...this.defaultConfig, ...this.gravatarConfig };\n        }\n    }\n    /**\n     * Return defaultConfig object\n     */\n    getDefaultConfig() {\n        return this.defaultConfig;\n    }\n    /**\n     * Generate gravatar url\n     *\n     * @param email is a string. If email is not a string, email will be set to empty string \"\" by default\n     * @param md5Hash is a string. If value is given it will take precedence over email.\n     * @param size number\n     * @param rating string\n     * @param fallback string\n     * @return gravatar url\n     */\n    generateGravatarUrl(email, md5Hash, size = this.defaultConfig.size, rating = this.defaultConfig.rating, fallback = this.defaultConfig.fallback) {\n        let emailHash;\n        if (md5Hash) {\n            emailHash = md5Hash;\n        }\n        else {\n            try {\n                email = email.trim().toLowerCase();\n            }\n            catch (e) {\n                console.error(`[ngx-gravatar] - Email (${email}) is not a string. Empty string is used as a default email.`);\n                email = '';\n            }\n            emailHash = Md5.hashStr(email);\n        }\n        return `https://www.gravatar.com/avatar/${emailHash}?s=${size}&r=${rating}&d=${fallback}`;\n    }\n}\nNgxGravatarService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: NgxGravatarService, deps: [{ token: GRAVATAR_CONFIG_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nNgxGravatarService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: NgxGravatarService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: NgxGravatarService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [GRAVATAR_CONFIG_TOKEN]\n                }] }]; } });\n\n/* eslint-disable @angular-eslint/directive-selector */\nclass NgxGravatarDirective {\n    constructor(elementRef, renderer, gravatarService) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.gravatarService = gravatarService;\n        this.style = {};\n        this.initialized = false;\n        this.defaultConfig = this.gravatarService.getDefaultConfig();\n        // Listen for error when fetching custom src\n        this.renderer.listen(this.elementRef.nativeElement, 'error', (event) => {\n            if (!this.isGravatarUsed) {\n                this.initializeAvatar(true); // Force using gravatar\n            }\n        });\n    }\n    ngOnInit() {\n        this.initializeAvatar();\n        this.initialized = true;\n        this.isGravatarUsed = false;\n    }\n    ngOnChanges() {\n        if (this.initialized) {\n            this.initializeAvatar();\n        }\n    }\n    /**\n     * Set default values for user inputs if they are not provided\n     */\n    setDefaultValues() {\n        this.size = this.computeSize();\n        this.ratio =\n            this.ratio === undefined ? this.defaultConfig.ratio : this.ratio;\n        this.requestedSize = this.size * this.ratio;\n        this.round =\n            this.round === undefined ? this.defaultConfig.round : this.round;\n        this.cornerRadius =\n            this.cornerRadius === undefined\n                ? this.defaultConfig.cornerRadius\n                : this.cornerRadius;\n        this.preferGravatar =\n            this.preferGravatar === undefined\n                ? this.defaultConfig.preferGravatar\n                : this.preferGravatar;\n    }\n    /**\n     * Initialize avatar.\n     * Custom source has higher priority if preferGravatar is not set on.\n     * Finally, set styles for the avatar.\n     */\n    initializeAvatar(forcedGravatar) {\n        this.setDefaultValues();\n        let url = '';\n        if (this.preferGravatar || forcedGravatar) {\n            url = this.gravatarService.generateGravatarUrl(this.email, this.md5Hash, this.requestedSize, this.rating, this.fallback);\n            this.isGravatarUsed = true;\n        }\n        else {\n            // this.preferGravatar == false\n            if (this.src) {\n                url = this.src;\n            }\n            else {\n                // fallback to gravatar\n                url = this.gravatarService.generateGravatarUrl(this.email, this.md5Hash, this.requestedSize, this.rating, this.fallback);\n                this.isGravatarUsed = true;\n            }\n        }\n        this.renderer.setProperty(this.elementRef.nativeElement, 'src', url);\n        this.setStyle(this.avatarStyle());\n    }\n    /**\n     * Compute the size of the avatar\n     *\n     * @return size\n     */\n    computeSize() {\n        let size = this.size === undefined ? this.defaultConfig.size : this.size;\n        if (this.style && this.style.width) {\n            try {\n                const width = this.style.width.trim();\n                if (width.match(/^\\d+px$/)) {\n                    // width with px unit\n                    size = width.replace('px', '');\n                }\n            }\n            catch (e) {\n                return size;\n            }\n        }\n        return size;\n    }\n    /**\n     * Compute style object\n     *\n     * @return style object\n     */\n    avatarStyle() {\n        const style = {\n            width: this.size + 'px',\n            height: this.size + 'px',\n            borderRadius: this.round\n                ? this.defaultConfig.borderRadius\n                : this.cornerRadius + 'px',\n            borderStyle: this.defaultConfig.hasBorder || this.borderColor || this.borderWidth\n                ? this.defaultConfig.borderStyle\n                : 'none',\n            borderColor: this.borderColor\n                ? this.borderColor\n                : this.defaultConfig.borderColor,\n            borderWidth: this.borderWidth\n                ? this.borderWidth + 'px'\n                : this.defaultConfig.borderWidth + 'px',\n            backgroundColor: this.backgroundColor\n                ? this.backgroundColor\n                : this.defaultConfig.backgroundColor,\n        };\n        return { ...style, ...this.style };\n    }\n    /**\n     * Set style for the avatar\n     *\n     * @param styles style object\n     */\n    setStyle(styles) {\n        Object.keys(styles).forEach((key) => {\n            this.renderer.setStyle(this.elementRef.nativeElement, key, styles[key]);\n        });\n    }\n}\nNgxGravatarDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: NgxGravatarDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: NgxGravatarService }], target: i0.ɵɵFactoryTarget.Directive });\nNgxGravatarDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.6\", type: NgxGravatarDirective, selector: \"[ngx-gravatar], [ngxGravatar]\", inputs: { src: \"src\", email: \"email\", md5Hash: \"md5Hash\", size: \"size\", fallback: \"fallback\", rating: \"rating\", round: \"round\", cornerRadius: \"cornerRadius\", borderColor: \"borderColor\", borderWidth: \"borderWidth\", style: \"style\", preferGravatar: \"preferGravatar\", backgroundColor: \"backgroundColor\", ratio: \"ratio\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: NgxGravatarDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngx-gravatar], [ngxGravatar]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: NgxGravatarService }]; }, propDecorators: { src: [{\n                type: Input\n            }], email: [{\n                type: Input\n            }], md5Hash: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], fallback: [{\n                type: Input\n            }], rating: [{\n                type: Input\n            }], round: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], borderColor: [{\n                type: Input\n            }], borderWidth: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], preferGravatar: [{\n                type: Input\n            }], backgroundColor: [{\n                type: Input\n            }], ratio: [{\n                type: Input\n            }] } });\n\nclass GravatarModule {\n    static forRoot(gravatarConfig) {\n        return {\n            ngModule: GravatarModule,\n            providers: [\n                {\n                    provide: GRAVATAR_CONFIG_TOKEN,\n                    useValue: gravatarConfig,\n                },\n            ],\n        };\n    }\n}\nGravatarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: GravatarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGravatarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: GravatarModule, declarations: [NgxGravatarDirective], exports: [NgxGravatarDirective] });\nGravatarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: GravatarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: GravatarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NgxGravatarDirective],\n                    exports: [NgxGravatarDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-gravatar\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FALLBACK, GravatarModule, NgxGravatarDirective, NgxGravatarService, RATING };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,QAArC,EAA+CC,MAA/C,EAAuDC,SAAvD,EAAkEC,KAAlE,EAAyEC,QAAzE,QAAyF,eAAzF;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA;AACA;AACA;;AACA,MAAMC,qBAAqB,GAAG,IAAIR,cAAJ,CAAmB,uBAAnB,CAA9B,C,CAEA;;AACA,IAAIS,QAAJ;;AACA,CAAC,UAAUA,QAAV,EAAoB;EACjBA,QAAQ,CAAC,OAAD,CAAR,GAAoB,OAApB;EACAA,QAAQ,CAAC,WAAD,CAAR,GAAwB,WAAxB;EACAA,QAAQ,CAAC,IAAD,CAAR,GAAiB,IAAjB;EACAA,QAAQ,CAAC,IAAD,CAAR,GAAiB,IAAjB;EACAA,QAAQ,CAAC,WAAD,CAAR,GAAwB,WAAxB;EACAA,QAAQ,CAAC,OAAD,CAAR,GAAoB,OAApB;EACAA,QAAQ,CAAC,UAAD,CAAR,GAAuB,UAAvB;EACAA,QAAQ,CAAC,SAAD,CAAR,GAAsB,SAAtB;AACH,CATD,EASGA,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CATX;;AAUA,IAAIC,MAAJ;;AACA,CAAC,UAAUA,MAAV,EAAkB;EACfA,MAAM,CAAC,GAAD,CAAN,GAAc,GAAd;EACAA,MAAM,CAAC,IAAD,CAAN,GAAe,IAAf;EACAA,MAAM,CAAC,GAAD,CAAN,GAAc,GAAd;EACAA,MAAM,CAAC,GAAD,CAAN,GAAc,GAAd;AACH,CALD,EAKGA,MAAM,KAAKA,MAAM,GAAG,EAAd,CALT;;AAOA,MAAMC,cAAc,GAAG;EACnBC,QAAQ,EAAEH,QAAQ,CAACI,KADA;EAEnBC,IAAI,EAAE,EAFa;EAGnBC,YAAY,EAAE,CAHK;EAInBC,cAAc,EAAE,KAJG;EAKnBC,SAAS,EAAE,KALQ;EAMnBC,WAAW,EAAE,SANM;EAOnBC,YAAY,EAAE,KAPK;EAQnBC,WAAW,EAAE,OARM;EASnBC,WAAW,EAAE,CATM;EAUnBC,KAAK,EAAE,IAVY;EAWnBC,eAAe,EAAE,aAXE;EAYnBC,MAAM,EAAEd,MAAM,CAACe,CAZI;EAanBC,KAAK,EAAE;AAbY,CAAvB;;AAgBA,MAAMC,kBAAN,CAAyB;EACrBC,WAAW,CAACC,cAAD,EAAiB;IACxB,KAAKA,cAAL,GAAsBA,cAAtB;IACA,KAAKC,aAAL,GAAqB,EAAE,GAAGnB;IAAL,CAArB;;IACA,IAAI,KAAKkB,cAAT,EAAyB;MACrB,KAAKC,aAAL,GAAqB,EAAE,GAAG,KAAKA,aAAV;QAAyB,GAAG,KAAKD;MAAjC,CAArB;IACH;EACJ;EACD;AACJ;AACA;;;EACIE,gBAAgB,GAAG;IACf,OAAO,KAAKD,aAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIE,mBAAmB,CAACC,KAAD,EAAQC,OAAR,EAAiBpB,IAAI,GAAG,KAAKgB,aAAL,CAAmBhB,IAA3C,EAAiDU,MAAM,GAAG,KAAKM,aAAL,CAAmBN,MAA7E,EAAqFZ,QAAQ,GAAG,KAAKkB,aAAL,CAAmBlB,QAAnH,EAA6H;IAC5I,IAAIuB,SAAJ;;IACA,IAAID,OAAJ,EAAa;MACTC,SAAS,GAAGD,OAAZ;IACH,CAFD,MAGK;MACD,IAAI;QACAD,KAAK,GAAGA,KAAK,CAACG,IAAN,GAAaC,WAAb,EAAR;MACH,CAFD,CAGA,OAAOC,CAAP,EAAU;QACNC,OAAO,CAACC,KAAR,CAAe,2BAA0BP,KAAM,6DAA/C;QACAA,KAAK,GAAG,EAAR;MACH;;MACDE,SAAS,GAAG5B,GAAG,CAACkC,OAAJ,CAAYR,KAAZ,CAAZ;IACH;;IACD,OAAQ,mCAAkCE,SAAU,MAAKrB,IAAK,MAAKU,MAAO,MAAKZ,QAAS,EAAxF;EACH;;AAxCoB;;AA0CzBe,kBAAkB,CAACe,IAAnB;EAAA,iBAA+Gf,kBAA/G,EAAqG5B,EAArG,UAAmJS,qBAAnJ;AAAA;;AACAmB,kBAAkB,CAACgB,KAAnB,kBADqG5C,EACrG;EAAA,OAAmH4B,kBAAnH;EAAA,SAAmHA,kBAAnH;EAAA,YAAmJ;AAAnJ;;AACA;EAAA,mDAFqG5B,EAErG,mBAA2F4B,kBAA3F,EAA2H,CAAC;IAChHiB,IAAI,EAAE3C,UAD0G;IAEhH4C,IAAI,EAAE,CAAC;MACCC,UAAU,EAAE;IADb,CAAD;EAF0G,CAAD,CAA3H,EAK4B,YAAY;IAAE,OAAO,CAAC;MAAEF,IAAI,EAAEG,SAAR;MAAmBC,UAAU,EAAE,CAAC;QAC9DJ,IAAI,EAAE1C;MADwD,CAAD,EAE9D;QACC0C,IAAI,EAAEzC,MADP;QAEC0C,IAAI,EAAE,CAACrC,qBAAD;MAFP,CAF8D;IAA/B,CAAD,CAAP;EAKlB,CAVxB;AAAA;AAYA;;;AACA,MAAMyC,oBAAN,CAA2B;EACvBrB,WAAW,CAACsB,UAAD,EAAaC,QAAb,EAAuBC,eAAvB,EAAwC;IAC/C,KAAKF,UAAL,GAAkBA,UAAlB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,eAAL,GAAuBA,eAAvB;IACA,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,WAAL,GAAmB,KAAnB;IACA,KAAKxB,aAAL,GAAqB,KAAKsB,eAAL,CAAqBrB,gBAArB,EAArB,CAN+C,CAO/C;;IACA,KAAKoB,QAAL,CAAcI,MAAd,CAAqB,KAAKL,UAAL,CAAgBM,aAArC,EAAoD,OAApD,EAA8DC,KAAD,IAAW;MACpE,IAAI,CAAC,KAAKC,cAAV,EAA0B;QACtB,KAAKC,gBAAL,CAAsB,IAAtB,EADsB,CACO;MAChC;IACJ,CAJD;EAKH;;EACDC,QAAQ,GAAG;IACP,KAAKD,gBAAL;IACA,KAAKL,WAAL,GAAmB,IAAnB;IACA,KAAKI,cAAL,GAAsB,KAAtB;EACH;;EACDG,WAAW,GAAG;IACV,IAAI,KAAKP,WAAT,EAAsB;MAClB,KAAKK,gBAAL;IACH;EACJ;EACD;AACJ;AACA;;;EACIG,gBAAgB,GAAG;IACf,KAAKhD,IAAL,GAAY,KAAKiD,WAAL,EAAZ;IACA,KAAKrC,KAAL,GACI,KAAKA,KAAL,KAAeqB,SAAf,GAA2B,KAAKjB,aAAL,CAAmBJ,KAA9C,GAAsD,KAAKA,KAD/D;IAEA,KAAKsC,aAAL,GAAqB,KAAKlD,IAAL,GAAY,KAAKY,KAAtC;IACA,KAAKJ,KAAL,GACI,KAAKA,KAAL,KAAeyB,SAAf,GAA2B,KAAKjB,aAAL,CAAmBR,KAA9C,GAAsD,KAAKA,KAD/D;IAEA,KAAKP,YAAL,GACI,KAAKA,YAAL,KAAsBgC,SAAtB,GACM,KAAKjB,aAAL,CAAmBf,YADzB,GAEM,KAAKA,YAHf;IAIA,KAAKC,cAAL,GACI,KAAKA,cAAL,KAAwB+B,SAAxB,GACM,KAAKjB,aAAL,CAAmBd,cADzB,GAEM,KAAKA,cAHf;EAIH;EACD;AACJ;AACA;AACA;AACA;;;EACI2C,gBAAgB,CAACM,cAAD,EAAiB;IAC7B,KAAKH,gBAAL;IACA,IAAII,GAAG,GAAG,EAAV;;IACA,IAAI,KAAKlD,cAAL,IAAuBiD,cAA3B,EAA2C;MACvCC,GAAG,GAAG,KAAKd,eAAL,CAAqBpB,mBAArB,CAAyC,KAAKC,KAA9C,EAAqD,KAAKC,OAA1D,EAAmE,KAAK8B,aAAxE,EAAuF,KAAKxC,MAA5F,EAAoG,KAAKZ,QAAzG,CAAN;MACA,KAAK8C,cAAL,GAAsB,IAAtB;IACH,CAHD,MAIK;MACD;MACA,IAAI,KAAKS,GAAT,EAAc;QACVD,GAAG,GAAG,KAAKC,GAAX;MACH,CAFD,MAGK;QACD;QACAD,GAAG,GAAG,KAAKd,eAAL,CAAqBpB,mBAArB,CAAyC,KAAKC,KAA9C,EAAqD,KAAKC,OAA1D,EAAmE,KAAK8B,aAAxE,EAAuF,KAAKxC,MAA5F,EAAoG,KAAKZ,QAAzG,CAAN;QACA,KAAK8C,cAAL,GAAsB,IAAtB;MACH;IACJ;;IACD,KAAKP,QAAL,CAAciB,WAAd,CAA0B,KAAKlB,UAAL,CAAgBM,aAA1C,EAAyD,KAAzD,EAAgEU,GAAhE;IACA,KAAKG,QAAL,CAAc,KAAKC,WAAL,EAAd;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIP,WAAW,GAAG;IACV,IAAIjD,IAAI,GAAG,KAAKA,IAAL,KAAciC,SAAd,GAA0B,KAAKjB,aAAL,CAAmBhB,IAA7C,GAAoD,KAAKA,IAApE;;IACA,IAAI,KAAKuC,KAAL,IAAc,KAAKA,KAAL,CAAWkB,KAA7B,EAAoC;MAChC,IAAI;QACA,MAAMA,KAAK,GAAG,KAAKlB,KAAL,CAAWkB,KAAX,CAAiBnC,IAAjB,EAAd;;QACA,IAAImC,KAAK,CAACC,KAAN,CAAY,SAAZ,CAAJ,EAA4B;UACxB;UACA1D,IAAI,GAAGyD,KAAK,CAACE,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAP;QACH;MACJ,CAND,CAOA,OAAOnC,CAAP,EAAU;QACN,OAAOxB,IAAP;MACH;IACJ;;IACD,OAAOA,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIwD,WAAW,GAAG;IACV,MAAMjB,KAAK,GAAG;MACVkB,KAAK,EAAE,KAAKzD,IAAL,GAAY,IADT;MAEV4D,MAAM,EAAE,KAAK5D,IAAL,GAAY,IAFV;MAGVK,YAAY,EAAE,KAAKG,KAAL,GACR,KAAKQ,aAAL,CAAmBX,YADX,GAER,KAAKJ,YAAL,GAAoB,IALhB;MAMVK,WAAW,EAAE,KAAKU,aAAL,CAAmBb,SAAnB,IAAgC,KAAKC,WAArC,IAAoD,KAAKG,WAAzD,GACP,KAAKS,aAAL,CAAmBV,WADZ,GAEP,MARI;MASVF,WAAW,EAAE,KAAKA,WAAL,GACP,KAAKA,WADE,GAEP,KAAKY,aAAL,CAAmBZ,WAXf;MAYVG,WAAW,EAAE,KAAKA,WAAL,GACP,KAAKA,WAAL,GAAmB,IADZ,GAEP,KAAKS,aAAL,CAAmBT,WAAnB,GAAiC,IAd7B;MAeVE,eAAe,EAAE,KAAKA,eAAL,GACX,KAAKA,eADM,GAEX,KAAKO,aAAL,CAAmBP;IAjBf,CAAd;IAmBA,OAAO,EAAE,GAAG8B,KAAL;MAAY,GAAG,KAAKA;IAApB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIgB,QAAQ,CAACM,MAAD,EAAS;IACbC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA6BC,GAAD,IAAS;MACjC,KAAK5B,QAAL,CAAckB,QAAd,CAAuB,KAAKnB,UAAL,CAAgBM,aAAvC,EAAsDuB,GAAtD,EAA2DJ,MAAM,CAACI,GAAD,CAAjE;IACH,CAFD;EAGH;;AA/HsB;;AAiI3B9B,oBAAoB,CAACP,IAArB;EAAA,iBAAiHO,oBAAjH,EAhJqGlD,EAgJrG,mBAAuJA,EAAE,CAACiF,UAA1J,GAhJqGjF,EAgJrG,mBAAiLA,EAAE,CAACkF,SAApL,GAhJqGlF,EAgJrG,mBAA0M4B,kBAA1M;AAAA;;AACAsB,oBAAoB,CAACiC,IAArB,kBAjJqGnF,EAiJrG;EAAA,MAAqGkD,oBAArG;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA,WAjJqGlD,EAiJrG;AAAA;;AACA;EAAA,mDAlJqGA,EAkJrG,mBAA2FkD,oBAA3F,EAA6H,CAAC;IAClHL,IAAI,EAAExC,SAD4G;IAElHyC,IAAI,EAAE,CAAC;MACCsC,QAAQ,EAAE;IADX,CAAD;EAF4G,CAAD,CAA7H,EAK4B,YAAY;IAAE,OAAO,CAAC;MAAEvC,IAAI,EAAE7C,EAAE,CAACiF;IAAX,CAAD,EAA0B;MAAEpC,IAAI,EAAE7C,EAAE,CAACkF;IAAX,CAA1B,EAAkD;MAAErC,IAAI,EAAEjB;IAAR,CAAlD,CAAP;EAAyF,CALnI,EAKqJ;IAAEwC,GAAG,EAAE,CAAC;MAC7IvB,IAAI,EAAEvC;IADuI,CAAD,CAAP;IAErI4B,KAAK,EAAE,CAAC;MACRW,IAAI,EAAEvC;IADE,CAAD,CAF8H;IAIrI6B,OAAO,EAAE,CAAC;MACVU,IAAI,EAAEvC;IADI,CAAD,CAJ4H;IAMrIS,IAAI,EAAE,CAAC;MACP8B,IAAI,EAAEvC;IADC,CAAD,CAN+H;IAQrIO,QAAQ,EAAE,CAAC;MACXgC,IAAI,EAAEvC;IADK,CAAD,CAR2H;IAUrImB,MAAM,EAAE,CAAC;MACToB,IAAI,EAAEvC;IADG,CAAD,CAV6H;IAYrIiB,KAAK,EAAE,CAAC;MACRsB,IAAI,EAAEvC;IADE,CAAD,CAZ8H;IAcrIU,YAAY,EAAE,CAAC;MACf6B,IAAI,EAAEvC;IADS,CAAD,CAduH;IAgBrIa,WAAW,EAAE,CAAC;MACd0B,IAAI,EAAEvC;IADQ,CAAD,CAhBwH;IAkBrIgB,WAAW,EAAE,CAAC;MACduB,IAAI,EAAEvC;IADQ,CAAD,CAlBwH;IAoBrIgD,KAAK,EAAE,CAAC;MACRT,IAAI,EAAEvC;IADE,CAAD,CApB8H;IAsBrIW,cAAc,EAAE,CAAC;MACjB4B,IAAI,EAAEvC;IADW,CAAD,CAtBqH;IAwBrIkB,eAAe,EAAE,CAAC;MAClBqB,IAAI,EAAEvC;IADY,CAAD,CAxBoH;IA0BrIqB,KAAK,EAAE,CAAC;MACRkB,IAAI,EAAEvC;IADE,CAAD;EA1B8H,CALrJ;AAAA;;AAmCA,MAAM+E,cAAN,CAAqB;EACH,OAAPC,OAAO,CAACxD,cAAD,EAAiB;IAC3B,OAAO;MACHyD,QAAQ,EAAEF,cADP;MAEHG,SAAS,EAAE,CACP;QACIC,OAAO,EAAEhF,qBADb;QAEIiF,QAAQ,EAAE5D;MAFd,CADO;IAFR,CAAP;EASH;;AAXgB;;AAarBuD,cAAc,CAAC1C,IAAf;EAAA,iBAA2G0C,cAA3G;AAAA;;AACAA,cAAc,CAACM,IAAf,kBAnMqG3F,EAmMrG;EAAA,MAA4GqF;AAA5G;AACAA,cAAc,CAACO,IAAf,kBApMqG5F,EAoMrG;;AACA;EAAA,mDArMqGA,EAqMrG,mBAA2FqF,cAA3F,EAAuH,CAAC;IAC5GxC,IAAI,EAAEtC,QADsG;IAE5GuC,IAAI,EAAE,CAAC;MACC+C,YAAY,EAAE,CAAC3C,oBAAD,CADf;MAEC4C,OAAO,EAAE,CAAC5C,oBAAD;IAFV,CAAD;EAFsG,CAAD,CAAvH;AAAA;AAQA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASxC,QAAT,EAAmB2E,cAAnB,EAAmCnC,oBAAnC,EAAyDtB,kBAAzD,EAA6EjB,MAA7E"},"metadata":{},"sourceType":"module"}