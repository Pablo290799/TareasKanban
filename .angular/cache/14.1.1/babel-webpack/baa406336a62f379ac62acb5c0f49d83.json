{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/pablo.bogado/Desktop/Angular/TareasKanban/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nlet BoardComponent = class BoardComponent {\n  constructor(route, dataService, router) {\n    this.route = route;\n    this.dataService = dataService;\n    this.router = router;\n    this.lists = [];\n    this.boardId = null;\n    this.editTitle = {};\n    this.editCard = {};\n    this.boardInfo = null;\n    this.titleChanged = false;\n    this.listCards = {};\n    this.addUserEmail = '';\n    this.lista = [{\n      id: 'list1',\n      title: 'Lista 1',\n      cards: ['Card 1', 'Card 2', 'Card 3']\n    }, {\n      id: 'list2',\n      title: 'Lista 2',\n      cards: ['Card 4', 'Card 5', 'Card 6']\n    }, {\n      id: 'list3',\n      title: 'Lista 3',\n      cards: ['Card 7', 'Card 8', 'Card 9']\n    }];\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.boardId = _this.route.snapshot.paramMap.get('id');\n\n      if (_this.boardId) {\n        _this.boardInfo = (yield _this.dataService.getBoardInfo(_this.boardId)).data;\n        _this.lists = yield _this.dataService.getBoardLists(_this.boardId); // Retrieve cards for each list\n\n        for (let list of _this.lists) {\n          _this.listCards[list.id] = yield _this.dataService.getListCards(list.id);\n        }\n\n        _this.handleRealtimeUpdates();\n      }\n    })();\n  } //\n  // BOARD logic\n  //\n\n\n  saveBoardTitle() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.dataService.updateBoard(_this2.boardInfo);\n      _this2.titleChanged = false;\n    })();\n  }\n\n  deleteBoard() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.dataService.deleteBoard(_this3.boardInfo);\n\n      _this3.router.navigateByUrl('/workspace');\n    })();\n  } //\n  // LISTS logic\n  //\n\n\n  addList() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const newList = yield _this4.dataService.addBoardList(_this4.boardId, _this4.lists.length);\n    })();\n  }\n\n  editingTitle(list, edit = false) {\n    this.editTitle[list.id] = edit;\n  }\n\n  updateListTitle(list) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this5.dataService.updateBoardList(list);\n\n      _this5.editingTitle(list, false);\n    })();\n  }\n\n  deleteBoardList(list) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this6.dataService.deleteBoardList(list);\n    })();\n  } //\n  // CARDS logic\n  //\n\n\n  addCard(list) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this7.dataService.addListCard(list.id, _this7.boardId, _this7.listCards[list.id].length);\n    })();\n  }\n\n  editingCard(card, edit = false) {\n    this.editCard[card.id] = edit;\n  }\n\n  updateCard(card) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this8.dataService.updateCard(card);\n\n      _this8.editingCard(card, false);\n    })();\n  }\n\n  deleteCard(card) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this9.dataService.deleteCard(card);\n    })();\n  }\n\n  moveCardToList(card, newListId) {\n    const oldlist = card.listId; //Eliminar la tarjeta de la lista actual\n\n    this.listCards[oldlist] = this.listCards[oldlist].filter(c => c.id !== card.id); //Agregar la tarjeta a la nueva lista\n\n    card.listId = newListId;\n    this.listCards[newListId].push(card);\n  } // Función para manejar el evento de mover una tarjeta dentro de la misma lista\n\n\n  onCardMoved(event, listId) {\n    moveItemInArray(this.lists.find(list => list.id === listId)?.cards || [], event.previousIndex, event.currentIndex);\n  }\n\n  onCardDropped(event, targetListId) {\n    const previousListId = event.previousContainer.id;\n    const card = event.item.data; // Eliminar la tarjeta de la lista de origen\n\n    this.listCards[previousListId] = this.listCards[previousListId].filter(c => c.id !== card.id); // Insertar la tarjeta en la lista de destino en la posición actual\n\n    this.listCards[targetListId].splice(event.currentIndex, 0, card);\n  }\n\n  onCardDragEnded(event, listId) {\n    const currentIndex = event.currentIndex;\n    const previousIndex = event.previousIndex;\n\n    if (currentIndex !== previousIndex && !event.isPointerOverContainer) {\n      // Si la tarjeta no se soltó en una lista, devolverla a su posición original\n      const card = event.item.data;\n      const list = this.listCards[listId]; // Eliminar la tarjeta de su posición actual y devolverla a la posición anterior\n\n      list.splice(currentIndex, 1);\n      list.splice(previousIndex, 0, card);\n    }\n  } // Invites\n\n\n  addUser() {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      const res = yield _this10.dataService.addUserToBoard(_this10.boardId, _this10.addUserEmail);\n      _this10.addUserEmail = '';\n    })();\n  }\n\n  onKeydownHandler(event) {\n    if (event.keyCode === 27) {\n      // Close whatever needs to be closed!\n      this.titleChanged = false;\n      Object.keys(this.editCard).map(item => {\n        this.editCard[item] = false;\n        return item;\n      });\n      Object.keys(this.editTitle).map(item => {\n        this.editTitle[item] = false;\n        return item;\n      });\n    }\n  }\n\n  handleRealtimeUpdates() {\n    this.dataService.getTableChanges().subscribe(update => {\n      const record = update.new?.id ? update.new : update.old;\n      const event = update.eventType;\n      if (!record) return;\n\n      if (update.table == 'cards') {\n        if (event === 'INSERT') {\n          this.listCards[record.list_id].push(record);\n        } else if (event === 'UPDATE') {\n          const newArr = [];\n\n          for (let card of this.listCards[record.list_id]) {\n            if (card.id == record.id) {\n              card = record;\n            }\n\n            newArr.push(card);\n          }\n\n          this.listCards[record.list_id] = newArr;\n        } else if (event === 'DELETE') {\n          this.listCards[record.list_id] = this.listCards[record.list_id].filter(card => card.id !== record.id);\n        }\n      } else if (update.table == 'lists') {\n        if (event === 'INSERT') {\n          this.lists.push(record);\n          this.listCards[record.id] = [];\n        } else if (event === 'UPDATE') {\n          this.lists.filter(list => list.id === record.id)[0] = record;\n          const newArr = [];\n\n          for (let list of this.lists) {\n            if (list.id == record.id) {\n              list = record;\n            }\n\n            newArr.push(list);\n          }\n\n          this.lists = newArr;\n        } else if (event === 'DELETE') {\n          this.lists = this.lists.filter(list => list.id !== record.id);\n        }\n      }\n    });\n  }\n\n};\n\n__decorate([HostListener('document:keydown', ['$event'])], BoardComponent.prototype, \"onKeydownHandler\", null);\n\nBoardComponent = __decorate([Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.scss']\n})], BoardComponent);\nexport { BoardComponent };","map":{"version":3,"mappings":"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","names":["Component","HostListener","moveItemInArray","BoardComponent","constructor","route","dataService","router","id","title","cards","ngOnInit","boardId","snapshot","paramMap","get","boardInfo","getBoardInfo","data","lists","getBoardLists","list","listCards","getListCards","handleRealtimeUpdates","saveBoardTitle","updateBoard","titleChanged","deleteBoard","navigateByUrl","addList","newList","addBoardList","length","editingTitle","edit","editTitle","updateListTitle","updateBoardList","deleteBoardList","addCard","addListCard","editingCard","card","editCard","updateCard","deleteCard","moveCardToList","newListId","oldlist","listId","filter","c","push","onCardMoved","event","find","previousIndex","currentIndex","onCardDropped","targetListId","previousListId","previousContainer","item","splice","onCardDragEnded","isPointerOverContainer","addUser","res","addUserToBoard","addUserEmail","onKeydownHandler","keyCode","Object","keys","map","getTableChanges","subscribe","update","record","new","old","eventType","table","list_id","newArr","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\pablo.bogado\\Desktop\\Angular\\TareasKanban\\src\\app\\components\\inside\\board\\board.component.ts"],"sourcesContent":["import { Component, HostListener, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { DataService } from 'src/app/services/data.service';\r\n\r\n\r\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: 'app-board',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.scss'],\r\n})\r\nexport class BoardComponent implements OnInit {\r\n  lists: any[] = [];\r\n  boardId: string | null = null;\r\n  editTitle: any = {};\r\n  editCard: any = {};\r\n  boardInfo: any = null;\r\n  titleChanged = false;\r\n\r\n  listCards: any = {};\r\n  addUserEmail = '';\r\n\r\n  lista = [\r\n    { id: 'list1', title: 'Lista 1', cards: ['Card 1', 'Card 2', 'Card 3'] },\r\n    { id: 'list2', title: 'Lista 2', cards: ['Card 4', 'Card 5', 'Card 6'] },\r\n    { id: 'list3', title: 'Lista 3', cards: ['Card 7', 'Card 8', 'Card 9'] }\r\n  ];\r\n\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private dataService: DataService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    this.boardId = this.route.snapshot.paramMap.get('id');\r\n    if (this.boardId) {\r\n      this.boardInfo = (await this.dataService.getBoardInfo(this.boardId)).data;\r\n\r\n      this.lists = await this.dataService.getBoardLists(this.boardId);\r\n\r\n      // Retrieve cards for each list\r\n      for (let list of this.lists) {\r\n        this.listCards[list.id] = await this.dataService.getListCards(list.id);\r\n      }\r\n\r\n      this.handleRealtimeUpdates();\r\n    }\r\n  }\r\n\r\n  //\r\n  // BOARD logic\r\n  //\r\n  async saveBoardTitle() {\r\n    await this.dataService.updateBoard(this.boardInfo);\r\n    this.titleChanged = false;\r\n  }\r\n\r\n  async deleteBoard() {\r\n    await this.dataService.deleteBoard(this.boardInfo);\r\n    this.router.navigateByUrl('/workspace');\r\n  }\r\n\r\n  //\r\n  // LISTS logic\r\n  //\r\n  async addList() {\r\n    const newList = await this.dataService.addBoardList(\r\n      this.boardId!,\r\n      this.lists.length\r\n    );\r\n  }\r\n\r\n  editingTitle(list: any, edit = false) {\r\n    this.editTitle[list.id] = edit;\r\n  }\r\n\r\n  async updateListTitle(list: any) {\r\n    await this.dataService.updateBoardList(list);\r\n    this.editingTitle(list, false);\r\n  }\r\n\r\n  async deleteBoardList(list: any) {\r\n    await this.dataService.deleteBoardList(list);\r\n  }\r\n\r\n  //\r\n  // CARDS logic\r\n  //\r\n  async addCard(list: any) {\r\n    await this.dataService.addListCard(\r\n      list.id,\r\n      this.boardId!,\r\n      this.listCards[list.id].length\r\n    );\r\n  }\r\n\r\n  editingCard(card: any, edit = false) {\r\n    this.editCard[card.id] = edit;\r\n  }\r\n\r\n  async updateCard(card: any) {\r\n    await this.dataService.updateCard(card);\r\n    this.editingCard(card, false);\r\n  }\r\n\r\n  async deleteCard(card: any) {\r\n    await this.dataService.deleteCard(card);\r\n  }\r\n\r\n\r\n  moveCardToList(card: any, newListId : number) {\r\n    const oldlist = card.listId;\r\n    //Eliminar la tarjeta de la lista actual\r\n    this.listCards[oldlist] = this.listCards[oldlist].filter((c: { id: any; }) => c.id !== card.id);\r\n    //Agregar la tarjeta a la nueva lista\r\n    card.listId = newListId;\r\n    this.listCards[newListId].push(card);\r\n  }\r\n\r\n  // Función para manejar el evento de mover una tarjeta dentro de la misma lista\r\n  onCardMoved(event: CdkDragDrop<string[]>, listId: string) {\r\n    moveItemInArray(\r\n      this.lists.find(list => list.id === listId)?.cards || [],\r\n      event.previousIndex,\r\n      event.currentIndex\r\n    );\r\n  }\r\n    \r\n\r\n  onCardDropped(event: CdkDragDrop<any>, targetListId: string) {\r\n    const previousListId = event.previousContainer.id;\r\n    const card = event.item.data;\r\n\r\n    // Eliminar la tarjeta de la lista de origen\r\n    this.listCards[previousListId] = this.listCards[previousListId].filter((c: { id: any; }) => c.id !== card.id);\r\n\r\n    // Insertar la tarjeta en la lista de destino en la posición actual\r\n    this.listCards[targetListId].splice(event.currentIndex, 0, card); \r\n  }\r\n  \r\n  onCardDragEnded(event: any, listId: string) {\r\n    const currentIndex = event.currentIndex;\r\n    const previousIndex = event.previousIndex;\r\n\r\n    if (currentIndex !== previousIndex && !event.isPointerOverContainer) {\r\n        // Si la tarjeta no se soltó en una lista, devolverla a su posición original\r\n        const card = event.item.data;\r\n        const list = this.listCards[listId];\r\n\r\n        // Eliminar la tarjeta de su posición actual y devolverla a la posición anterior\r\n        list.splice(currentIndex, 1);\r\n        list.splice(previousIndex, 0, card);\r\n    }\r\n  }\r\n\r\n  // Invites\r\n  async addUser() {\r\n    const res = await this.dataService.addUserToBoard(\r\n      this.boardId!,\r\n      this.addUserEmail\r\n    );\r\n    this.addUserEmail = '';\r\n  }\r\n\r\n  @HostListener('document:keydown', ['$event']) onKeydownHandler(\r\n    event: KeyboardEvent\r\n  ) {\r\n    if (event.keyCode === 27) {\r\n      // Close whatever needs to be closed!\r\n      this.titleChanged = false;\r\n\r\n      Object.keys(this.editCard).map((item) => {\r\n        this.editCard[item] = false;\r\n        return item;\r\n      });\r\n\r\n      Object.keys(this.editTitle).map((item) => {\r\n        this.editTitle[item] = false;\r\n        return item;\r\n      });\r\n    }\r\n  }\r\n\r\n  handleRealtimeUpdates() {\r\n    this.dataService.getTableChanges().subscribe((update: any) => {\r\n      const record = update.new?.id ? update.new : update.old;\r\n      const event = update.eventType;\r\n\r\n      if (!record) return;\r\n\r\n      if (update.table == 'cards') {\r\n        if (event === 'INSERT') {\r\n          this.listCards[record.list_id].push(record);\r\n        } else if (event === 'UPDATE') {\r\n          const newArr = [];\r\n\r\n          for (let card of this.listCards[record.list_id]) {\r\n            if (card.id == record.id) {\r\n              card = record;\r\n            }\r\n            newArr.push(card);\r\n          }\r\n          this.listCards[record.list_id] = newArr;\r\n        } else if (event === 'DELETE') {\r\n          this.listCards[record.list_id] = this.listCards[\r\n            record.list_id\r\n          ].filter((card: any) => card.id !== record.id);\r\n        }\r\n      } else if (update.table == 'lists') {\r\n        if (event === 'INSERT') {\r\n          this.lists.push(record);\r\n          this.listCards[record.id] = [];\r\n        } else if (event === 'UPDATE') {\r\n          this.lists.filter((list: any) => list.id === record.id)[0] = record;\r\n\r\n          const newArr = [];\r\n\r\n          for (let list of this.lists) {\r\n            if (list.id == record.id) {\r\n              list = record;\r\n            }\r\n            newArr.push(list);\r\n          }\r\n          this.lists = newArr;\r\n        } else if (event === 'DELETE') {\r\n          this.lists = this.lists.filter((list: any) => list.id !== record.id);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}