{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/pablo.bogado/Desktop/Angular/TareasKanban/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nlet BoardComponent = class BoardComponent {\n  constructor(route, dataService, router) {\n    this.route = route;\n    this.dataService = dataService;\n    this.router = router;\n    this.lists = [];\n    this.boardId = null;\n    this.editTitle = {};\n    this.editCard = {};\n    this.boardInfo = null;\n    this.titleChanged = false;\n    this.listCards = {};\n    this.addUserEmail = '';\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.boardId = _this.route.snapshot.paramMap.get('id');\n\n      if (_this.boardId) {\n        _this.boardInfo = (yield _this.dataService.getBoardInfo(_this.boardId)).data;\n        _this.lists = yield _this.dataService.getBoardLists(_this.boardId); // Retrieve cards for each list\n\n        for (let list of _this.lists) {\n          _this.listCards[list.id] = yield _this.dataService.getListCards(list.id);\n        }\n\n        _this.handleRealtimeUpdates();\n      }\n    })();\n  } //\n  // BOARD logic\n  //\n\n\n  saveBoardTitle() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.dataService.updateBoard(_this2.boardInfo);\n      _this2.titleChanged = false;\n    })();\n  }\n\n  deleteBoard() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.dataService.deleteBoard(_this3.boardInfo);\n\n      _this3.router.navigateByUrl('/workspace');\n    })();\n  } //\n  // LISTS logic\n  //\n\n\n  addList() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const newList = yield _this4.dataService.addBoardList(_this4.boardId, _this4.lists.length);\n    })();\n  }\n\n  editingTitle(list, edit = false) {\n    this.editTitle[list.id] = edit;\n  }\n\n  updateListTitle(list) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this5.dataService.updateBoardList(list);\n\n      _this5.editingTitle(list, false);\n    })();\n  }\n\n  deleteBoardList(list) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this6.dataService.deleteBoardList(list);\n    })();\n  }\n\n  onCardDropped(event, targetListId) {\n    const previousListId = event.previousContainer.id;\n    const card = event.item.data; // Mover la tarjeta de la lista de origen a la lista de destino\n\n    this.listCards[previousListId] = this.listCards[previousListId].filter(c => c.id !== card.id);\n    this.listCards[targetListId].splice(event.currentIndex, 0, card);\n  } //\n  // CARDS logic\n  //\n\n\n  addCard(list) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this7.dataService.addListCard(list.id, _this7.boardId, _this7.listCards[list.id].length);\n    })();\n  }\n\n  editingCard(card, edit = false) {\n    this.editCard[card.id] = edit;\n  }\n\n  updateCard(card) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this8.dataService.updateCard(card);\n\n      _this8.editingCard(card, false);\n    })();\n  }\n\n  deleteCard(card) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this9.dataService.deleteCard(card);\n    })();\n  } // Invites\n\n\n  addUser() {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      const res = yield _this10.dataService.addUserToBoard(_this10.boardId, _this10.addUserEmail);\n      _this10.addUserEmail = '';\n    })();\n  }\n\n  onKeydownHandler(event) {\n    if (event.keyCode === 27) {\n      // Close whatever needs to be closed!\n      this.titleChanged = false;\n      Object.keys(this.editCard).map(item => {\n        this.editCard[item] = false;\n        return item;\n      });\n      Object.keys(this.editTitle).map(item => {\n        this.editTitle[item] = false;\n        return item;\n      });\n    }\n  }\n\n  handleRealtimeUpdates() {\n    this.dataService.getTableChanges().subscribe(update => {\n      const record = update.new?.id ? update.new : update.old;\n      const event = update.eventType;\n      if (!record) return;\n\n      if (update.table == 'cards') {\n        if (event === 'INSERT') {\n          this.listCards[record.list_id].push(record);\n        } else if (event === 'UPDATE') {\n          const newArr = [];\n\n          for (let card of this.listCards[record.list_id]) {\n            if (card.id == record.id) {\n              card = record;\n            }\n\n            newArr.push(card);\n          }\n\n          this.listCards[record.list_id] = newArr;\n        } else if (event === 'DELETE') {\n          this.listCards[record.list_id] = this.listCards[record.list_id].filter(card => card.id !== record.id);\n        }\n      } else if (update.table == 'lists') {\n        if (event === 'INSERT') {\n          this.lists.push(record);\n          this.listCards[record.id] = [];\n        } else if (event === 'UPDATE') {\n          this.lists.filter(list => list.id === record.id)[0] = record;\n          const newArr = [];\n\n          for (let list of this.lists) {\n            if (list.id == record.id) {\n              list = record;\n            }\n\n            newArr.push(list);\n          }\n\n          this.lists = newArr;\n        } else if (event === 'DELETE') {\n          this.lists = this.lists.filter(list => list.id !== record.id);\n        }\n      }\n    });\n  }\n\n};\n\n__decorate([HostListener('document:keydown', ['$event'])], BoardComponent.prototype, \"onKeydownHandler\", null);\n\nBoardComponent = __decorate([Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.scss']\n})], BoardComponent);\nexport { BoardComponent };","map":{"version":3,"mappings":"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","names":["Component","HostListener","BoardComponent","constructor","route","dataService","router","ngOnInit","boardId","snapshot","paramMap","get","boardInfo","getBoardInfo","data","lists","getBoardLists","list","listCards","id","getListCards","handleRealtimeUpdates","saveBoardTitle","updateBoard","titleChanged","deleteBoard","navigateByUrl","addList","newList","addBoardList","length","editingTitle","edit","editTitle","updateListTitle","updateBoardList","deleteBoardList","onCardDropped","event","targetListId","previousListId","previousContainer","card","item","filter","c","splice","currentIndex","addCard","addListCard","editingCard","editCard","updateCard","deleteCard","addUser","res","addUserToBoard","addUserEmail","onKeydownHandler","keyCode","Object","keys","map","getTableChanges","subscribe","update","record","new","old","eventType","table","list_id","push","newArr","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\pablo.bogado\\Desktop\\Angular\\TareasKanban\\src\\app\\components\\inside\\board\\board.component.ts"],"sourcesContent":["import { Component, HostListener, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { DataService } from 'src/app/services/data.service';\r\n\r\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: 'app-board',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.scss'],\r\n})\r\nexport class BoardComponent implements OnInit {\r\n  lists: any[] = [];\r\n  boardId: string | null = null;\r\n  editTitle: any = {};\r\n  editCard: any = {};\r\n  boardInfo: any = null;\r\n  titleChanged = false;\r\n\r\n  listCards: any = {};\r\n  addUserEmail = '';\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private dataService: DataService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    this.boardId = this.route.snapshot.paramMap.get('id');\r\n    if (this.boardId) {\r\n      this.boardInfo = (await this.dataService.getBoardInfo(this.boardId)).data;\r\n\r\n      this.lists = await this.dataService.getBoardLists(this.boardId);\r\n\r\n      // Retrieve cards for each list\r\n      for (let list of this.lists) {\r\n        this.listCards[list.id] = await this.dataService.getListCards(list.id);\r\n      }\r\n\r\n      this.handleRealtimeUpdates();\r\n    }\r\n  }\r\n\r\n  //\r\n  // BOARD logic\r\n  //\r\n  async saveBoardTitle() {\r\n    await this.dataService.updateBoard(this.boardInfo);\r\n    this.titleChanged = false;\r\n  }\r\n\r\n  async deleteBoard() {\r\n    await this.dataService.deleteBoard(this.boardInfo);\r\n    this.router.navigateByUrl('/workspace');\r\n  }\r\n\r\n  //\r\n  // LISTS logic\r\n  //\r\n  async addList() {\r\n    const newList = await this.dataService.addBoardList(\r\n      this.boardId!,\r\n      this.lists.length\r\n    );\r\n  }\r\n\r\n  editingTitle(list: any, edit = false) {\r\n    this.editTitle[list.id] = edit;\r\n  }\r\n\r\n  async updateListTitle(list: any) {\r\n    await this.dataService.updateBoardList(list);\r\n    this.editingTitle(list, false);\r\n  }\r\n\r\n  async deleteBoardList(list: any) {\r\n    await this.dataService.deleteBoardList(list);\r\n  }\r\n\r\n  \r\n  onCardDropped(event: any, targetListId: string) {\r\n    const previousListId = event.previousContainer.id;\r\n    const card = event.item.data;\r\n  \r\n    // Mover la tarjeta de la lista de origen a la lista de destino\r\n    this.listCards[previousListId] = this.listCards[previousListId].filter((c: any) => c.id !== card.id);\r\n    this.listCards[targetListId].splice(event.currentIndex, 0, card);\r\n  }\r\n\r\n\r\n\r\n  //\r\n  // CARDS logic\r\n  //\r\n  async addCard(list: any) {\r\n    await this.dataService.addListCard(\r\n      list.id,\r\n      this.boardId!,\r\n      this.listCards[list.id].length\r\n    );\r\n  }\r\n\r\n  editingCard(card: any, edit = false) {\r\n    this.editCard[card.id] = edit;\r\n  }\r\n\r\n  async updateCard(card: any) {\r\n    await this.dataService.updateCard(card);\r\n    this.editingCard(card, false);\r\n  }\r\n\r\n  async deleteCard(card: any) {\r\n    await this.dataService.deleteCard(card);\r\n  }\r\n\r\n  // Invites\r\n  async addUser() {\r\n    const res = await this.dataService.addUserToBoard(\r\n      this.boardId!,\r\n      this.addUserEmail\r\n    );\r\n    this.addUserEmail = '';\r\n  }\r\n\r\n  @HostListener('document:keydown', ['$event']) onKeydownHandler(\r\n    event: KeyboardEvent\r\n  ) {\r\n    if (event.keyCode === 27) {\r\n      // Close whatever needs to be closed!\r\n      this.titleChanged = false;\r\n\r\n      Object.keys(this.editCard).map((item) => {\r\n        this.editCard[item] = false;\r\n        return item;\r\n      });\r\n\r\n      Object.keys(this.editTitle).map((item) => {\r\n        this.editTitle[item] = false;\r\n        return item;\r\n      });\r\n    }\r\n  }\r\n\r\n  handleRealtimeUpdates() {\r\n    this.dataService.getTableChanges().subscribe((update: any) => {\r\n      const record = update.new?.id ? update.new : update.old;\r\n      const event = update.eventType;\r\n\r\n      if (!record) return;\r\n\r\n      if (update.table == 'cards') {\r\n        if (event === 'INSERT') {\r\n          this.listCards[record.list_id].push(record);\r\n        } else if (event === 'UPDATE') {\r\n          const newArr = [];\r\n\r\n          for (let card of this.listCards[record.list_id]) {\r\n            if (card.id == record.id) {\r\n              card = record;\r\n            }\r\n            newArr.push(card);\r\n          }\r\n          this.listCards[record.list_id] = newArr;\r\n        } else if (event === 'DELETE') {\r\n          this.listCards[record.list_id] = this.listCards[\r\n            record.list_id\r\n          ].filter((card: any) => card.id !== record.id);\r\n        }\r\n      } else if (update.table == 'lists') {\r\n        if (event === 'INSERT') {\r\n          this.lists.push(record);\r\n          this.listCards[record.id] = [];\r\n        } else if (event === 'UPDATE') {\r\n          this.lists.filter((list: any) => list.id === record.id)[0] = record;\r\n\r\n          const newArr = [];\r\n\r\n          for (let list of this.lists) {\r\n            if (list.id == record.id) {\r\n              list = record;\r\n            }\r\n            newArr.push(list);\r\n          }\r\n          this.lists = newArr;\r\n        } else if (event === 'DELETE') {\r\n          this.lists = this.lists.filter((list: any) => list.id !== record.id);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}